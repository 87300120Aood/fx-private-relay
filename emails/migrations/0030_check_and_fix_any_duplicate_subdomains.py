# Generated by Django 2.2.24 on 2021-10-23 19:57

from django.db import migrations


def delete_all_later_duplicate_subdomains(apps, schema_editor):
    Profile = apps.get_model('emails', 'Profile')
    profiles_with_subdomain = (
        Profile.objects.all().exclude(subdomain=None)
        .order_by('user__date_joined')
    )
    for profile in profiles_with_subdomain:
        # first, empty out the subdomain of any new profiles that were
        # erroneously allowed to register a duplicate subdomain
        later_subdomain_registrations = Profile.objects.filter(
                subdomain__iexact=profile.subdomain,
                user__date_joined__gt=profile.user.date_joined
        )
        if len(later_subdomain_registrations) > 0:
            print('found case-insensitive duplicate subdomains of ' + \
                  f'{profile.user.username}')
            for dupe_subdomain_profile in later_subdomain_registrations:
                print('clearing subdomain for: ' + \
                      f'{dupe_subdomain_profile.user.username}')
                dupe_subdomain_profile.subdomain = None
                dupe_subdomain_profile.save()
        # then fix the oldest profile's subdomain to be lowercase
        profile.subdomain = profile.subdomain.lower()
        profile.save()


class Migration(migrations.Migration):

    dependencies = [
        ('emails', '0029_profile_add_deleted_metric_and_changeserver_storage_default'),
    ]

    operations = [
        migrations.RunPython(delete_all_later_duplicate_subdomains)
    ]
