@use "../../styles/tokens";
@use "~@mozilla-protocol/core/protocol/css/includes/lib";
@use "../../styles/typography" as styles-typography;

.wrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: lib.$spacing-md;

  .bundle-offer-heading {
    @include styles-typography.text-title-xs {
      background-image: linear-gradient(
        to right,
        lib.$color-violet-30,
        lib.$color-violet-80 20%,
        lib.$color-violet-30 80%
      );
      background-clip: text;
      color: transparent;
      text-align: center;
      font-weight: 700;
    }
  }
  .bundle-offer-content {
    max-width: lib.$content-md;
    text-align: center;
  }

  .desktop {
    display: none;
  }
  .mobile {
    display: initial;
  }

  @media screen and #{lib.$mq-xl} {
    .desktop {
      display: table;
      table-layout: fixed;
    }
    .mobile {
      display: none;
    }
  }

  .table-wrapper {
    padding: lib.$layout-md 0;
  }

  .discount-notice-wrapper {
    @include lib.text-body-sm;
    line-height: 100%;
    text-align: center;

    .discount-notice-container {
      display: flex;
      flex-direction: column;
      gap: lib.$spacing-sm;

      .discount-notice-bolded {
        font-weight: 800;
        width: 100%;
        flex: 1;
      }
    }
  }
}

table.desktop {
  $row-spacing: 2px;
  width: 100%;

  thead tr,
  tbody tr,
  tfoot tr:not(:last-child) {
    border-bottom: $row-spacing solid tokens.$color-grey-10;
  }

  tr {
    th:first-child {
      width: lib.$content-sm;
      font-weight: 400;
      text-align: start;
    }

    th:not(:first-child),
    td:not(:first-child) {
      min-width: lib.$layout-2xl;
      text-align: center;
      background-color: lib.$color-white;
      padding: lib.$spacing-md;
      // Fake spacing between the columns. The disadvantage of this method is
      // that the horizontal bottom border on rows is interrupted, but if we
      // used the appropriate
      //   border-collapse: separate;
      //   border-spacing: $spacing-md 0;
      // then we wouldn't have been able to apply a bottom border at all.
      border-inline: lib.$spacing-md * 0.5 solid lib.$color-light-gray-10;

      &:last-child {
        border-right-style: none;
      }
    }
  }

  thead {
    tr {
      th:first-child {
        color: tokens.$color-grey-40;
      }

      &:first-child th {
        border-top-left-radius: lib.$spacing-sm;
        border-top-right-radius: lib.$spacing-sm;
      }

      th:not(:first-child) {
        color: lib.$color-violet-70;
        font-weight: 600;

        &.recommended {
          position: relative;
          padding: 0;

          b {
            // This element is positioned absolutely (relative to th.recommended)
            // so we can make it cover the entire <th>. Unfortunately, just
            // setting `height: 100%` doesn't work in Chrome at the time of writing.
            position: absolute;
            top: 0;
            left: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            // We make it slightly taller than the <tr> so that it overlaps the
            // `thead tr`'s bottom border (with a width of $row-spacing).
            height: calc(100% + $row-spacing);
            background-color: lib.$color-violet-80;
            color: lib.$color-white;
            border-radius: lib.$spacing-sm;
            margin-bottom: -1 * $row-spacing;
          }
        }
      }
    }
  }

  tbody {
    tr {
      th {
        svg {
          display: inline;
          vertical-align: middle;
        }
      }

      td {
        color: lib.$color-dark-gray-50;

        svg {
          display: inline;
          color: lib.$color-blue-60;
        }
      }
    }
  }

  tfoot {
    tr:last-child td {
      border-bottom-left-radius: lib.$spacing-sm;
      border-bottom-right-radius: lib.$spacing-sm;
    }

    tr {
      // The actual height will be determined by the contents, but by giving the
      // <tr> an explicit height, `.pricing` can have its height set to 100% to
      // make it stretch the entire height of the row:
      height: 1px;
    }

    td {
      vertical-align: top;
      height: 100%;
    }

    .pricing {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: lib.$spacing-md;
      width: 100%;
      height: 100%;
      text-align: center;
      $pricing-toggle-height: 35px;

      &.single-price {
        justify-content: flex-end;
      }
      .pricing-toggle-wrapper {
        min-height: $pricing-toggle-height;
      }

      .pricing-overview {
        display: flex;
        flex-direction: column;
        gap: lib.$spacing-md;

        .price {
          @include lib.text-body-lg;
          color: lib.$color-blue-50;
          font-weight: 600;
        }

        .pick-button {
          border: 2px solid lib.$color-blue-50;
          border-radius: lib.$border-radius-sm;
          padding: lib.$spacing-sm;
          text-align: center;
          color: lib.$color-blue-50;
          font-weight: 700;

          &:hover {
            background-color: lib.$color-blue-50;
            color: lib.$color-white;
            cursor: pointer;
          }
        }

        small {
          text-align: center;
          line-height: 100%;
          font-size: 10px; // Following design specs
        }
      }
    }
  }
}

.mobile {
  .plans {
    display: flex;
    flex-wrap: wrap;
    gap: lib.$spacing-lg;
    list-style-type: none;

    .plan {
      flex: 1 0 lib.$content-xs;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: lib.$spacing-lg;
      max-width: 100%;
      background-color: lib.$color-white;
      border-radius: lib.$border-radius-md;
      padding: lib.$spacing-md;

      h3 {
        @include styles-typography.text-title-2xs {
          font-weight: 600;
          text-align: center;
        }
      }

      &.recommended h3 {
        // .plan adds a padding of $spacing-md on all sides of the h3.
        // Since we want the h3 to spand the full width of the plan, and to be
        // flush with the top of the .plan, we enlarge it by that amount on the
        // sides and at the top:
        width: calc(100% + 2 * lib.$spacing-md);
        margin-top: -1 * lib.$spacing-md;
        margin-inline: -1 * lib.$spacing-md;
        padding: lib.$spacing-md;
        background-color: lib.$color-violet-80;
        color: lib.$color-white;
        border-radius: lib.$spacing-sm;
        font-weight: 900;
      }

      .feature-list {
        flex: 1 0 auto;
        display: flex;
        flex-direction: column;
        gap: lib.$spacing-sm;
        width: 100%;
        list-style-type: none;

        li {
          display: flex;
          gap: lib.$spacing-xs;

          .description {
            flex: 1 0 auto;

            svg {
              display: inline;
              vertical-align: middle;
            }
          }
          .availability {
            flex: 0 1 lib.$layout-2xs;
            display: flex;
            align-items: center;
            justify-content: center;

            svg {
              color: lib.$color-blue-60;
            }
          }
        }
      }

      .pricing {
        display: flex;
        flex-direction: column;
        gap: lib.$spacing-md;
        width: 100%;

        .pricing-overview {
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: lib.$spacing-md;
          width: 100%;
          $billingMonthlyNoteHeight: 18px;
          padding-bottom: $billingMonthlyNoteHeight + lib.$spacing-md;

          small {
            @include lib.text-body-sm;
            display: block;
            height: $billingMonthlyNoteHeight;
            line-height: $billingMonthlyNoteHeight;
            margin-bottom: -1 * ($billingMonthlyNoteHeight + lib.$spacing-md);
          }

          .price {
            @include lib.text-body-xl;
            color: lib.$color-blue-50;
            font-weight: 600;
          }

          .primary-pick-button {
            width: 100%;
          }

          .pick-button {
            border: 2px solid lib.$color-blue-50;
            border-radius: lib.$border-radius-sm;
            width: 100%;
            padding: lib.$spacing-sm;
            text-align: center;
            color: lib.$color-blue-50;
            font-weight: 700;

            &:hover {
              background-color: lib.$color-blue-50;
              color: lib.$color-white;
              cursor: pointer;
            }
          }
        }
      }
    }
  }
}

.pricing-toggle {
  display: flex;
  background-color: tokens.$color-grey-10;
  padding: lib.$spacing-xs;
  border-radius: lib.$border-radius-lg;

  > div {
    @include lib.text-body-sm;
    width: 50%;
    padding: lib.$spacing-xs lib.$spacing-sm;
    text-align: center;
    color: tokens.$color-grey-40;
    font-weight: 500;
    cursor: pointer;

    &.is-selected {
      background-color: lib.$color-white;
      border-radius: lib.$border-radius-lg;
      color: lib.$color-blue-50;
    }
  }
}
