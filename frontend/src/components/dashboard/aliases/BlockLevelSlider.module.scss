@use "~@mozilla-protocol/core/protocol/css/includes/tokens/dist/index" as dist;
@use "~@mozilla-protocol/core/protocol/css/includes/lib";

$stopLabelHeight: 2rem;
$iconHeight: 50px;
$trackLineHeight: 4px;

.group {
  // A CSS variable to enable different values depending on the screen size:
  --thumbDiameter: 32px;

  display: flex;
  flex-direction: column;
  align-items: center;
  touch-action: none;
  padding: 0 lib.$spacing-md;
  width: 100%;

  @media screen and #{lib.$mq-md} {
    --thumbDiameter: 24px;
  }

  @media screen and #{lib.$mq-md} {
    flex-direction: row;
    gap: lib.$spacing-xl;
    padding: 0 lib.$spacing-lg;
  }
  @media screen and #{lib.$mq-lg} {
    gap: lib.$layout-2xl;
  }

  .control {
    width: 100%;
    max-width: lib.$content-xs;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-left: lib.$spacing-md;

    .slider-label {
      padding-bottom: lib.$spacing-md;
      display: inline-block;
    }

    .track-wrapper {
      // To absolutely position the track in the middle of the control, it needs
      // to be offset from the top by:
      // 1. the height of the icon on top of it ($iconHeight), plus
      // 2. half the width of the thumb, so it gets placed right in the middle
      //    of the thumb ($thumbDiameter / 2), minus
      // 3. half the height of the track itself ($trackLineHeight / 2):
      --trackLineOffset: calc(
        #{$iconHeight} + (var(--thumbDiameter) / 2) - (#{$trackLineHeight} / 2)
      );
      width: 100%;
      position: relative;
      padding-top: $iconHeight;

      .track {
        width: 100%;
        cursor: pointer;
        // The thumb, its labels, and the track are absolutely positioned and thus
        // don't take up space by default. Hence, we need to add bottom padding
        // for them so no other content overlaps them:
        // Note: when modifying this value, make sure to also modify it
        // in the .isFree section down below:
        padding-bottom: calc(
          var(--thumbDiameter) + #{$trackLineHeight} + #{$stopLabelHeight}
        );

        .track-line {
          position: absolute;
          background-color: lib.$color-light-gray-20;
          height: $trackLineHeight;
          top: calc(var(--trackLineOffset) - #{$iconHeight});
          width: 100%;
        }

        &:focus-within {
          .track-line,
          .track-stop {
            background-color: lib.$color-violet-05;
          }
          .track-stop p {
            color: lib.$color-violet-90;
          }
        }

        .thumb-container {
          position: absolute;
          top: calc(var(--thumbDiameter) / 2);
          transform: translateX(-50%);
          cursor: pointer;
          // The thumb has a z-index of 1 to overlap .track-stop-promotional,
          // which is also absolutely positioned but occurs later in the DOM,
          // and therefore would overlap the thumb.
          z-index: 1;

          .thumb {
            width: var(--thumbDiameter);
            height: var(--thumbDiameter);
            border-radius: 50%;
            background-color: lib.$color-violet-20;
            border: 4px solid lib.$color-violet-50;
            box-shadow: lib.$box-shadow-sm;

            &.is-focused {
              // The alpha value makes sure the lock icon is still visible for
              // free users when the thumb is placed on the "Promotionals" level:
              background-color: rgba(lib.$color-purple-30, 0.5);
              border-color: lib.$color-purple-60;
            }
            &.is-dragging {
              // This class can be used if we want to style the thumb
              // while it's being dragged.
            }
          }
        }
      }

      .track-stop {
        width: var(--thumbDiameter);
        height: var(--thumbDiameter);
        border-radius: 50%;
        background-color: lib.$color-light-gray-20;
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: lib.$spacing-sm;

        &:hover {
          background-color: lib.$color-purple-10;

          img {
            filter: grayscale(0%);
          }

          p {
            color: lib.$color-purple-30;
          }
        }

        img {
          filter: grayscale(100%) brightness(150%);
          // To position the icon above the track stops (which are as high as
          // the slider thumb), we set a negative top margin of its own height,
          // and the height of the thumb:
          margin-top: calc(-1 * #{$iconHeight} - var(--thumbDiameter));
          padding-bottom: lib.$spacing-sm;
          // The image should not take up space within the track stop,
          // so that the lock icon from .track-stop-promotional can be properly
          // centered:
          position: absolute;
        }

        p {
          @include lib.text-body-sm;
          color: lib.$color-dark-gray-05;
          font-weight: 700;
          position: absolute;
          // To position the track sop label below the track stops (which are as
          // high as the slider thumb), we place it at a distance of the thumb
          // from the top, and some spacing so that it's not glued to the track
          // stop:
          top: calc(var(--thumbDiameter) + #{lib.$spacing-xs});
          height: $stopLabelHeight;
          word-break: keep-all;
        }

        &.is-selected {
          img {
            filter: grayscale(0%);
          }
          p {
            color: lib.$color-black;
          }
        }

        &.track-stop-none {
          // To make the left-hand side of the track end in the middle, rather
          // than at the edge, of the first track stop, we offset the first
          // track stop by half of its width to the left:
          left: calc(-1 * var(--thumbDiameter) / 2);
        }
        &.track-stop-promotional {
          // To position the second track stop precisely in the middle, we
          // offset it by half of the width of the track, minus half its own
          // width:
          left: calc(50% - var(--thumbDiameter) / 2);
          cursor: pointer;
        }
        &.track-stop-all {
          // To make the right-hand side of the track end in the middle, rather
          // than at the edge, of the last track stop, we offset the last
          // track stop by half of its width to the right:
          right: calc(-1 * (var(--thumbDiameter) / 2));
        }
      }

      @media screen and #{lib.$mq-md} {
        padding-top: 0;

        .track-stop {
          top: 0;

          img {
            display: none;
          }
        }
      }
    }
  }

  .value-description {
    $arrowEdgeLength: 8px;
    margin-top: $arrowEdgeLength;
    background-color: lib.$color-light-gray-10;
    padding: lib.$spacing-md lib.$spacing-xl;
    border-radius: lib.$border-radius-md;
    position: relative;
    width: 100%;

    &::after {
      background-color: lib.$color-light-gray-10;
      height: 2 * $arrowEdgeLength;
      width: 2 * $arrowEdgeLength;
      transform: rotate(45deg);
      content: "";
      position: absolute;
      top: -1 * $arrowEdgeLength;
      left: 50%;
    }

    .value-description-content {
      width: lib.$content-xs;
      max-width: 100%;
      display: flex;
      flex-direction: column;
      gap: lib.$spacing-xs;

      a {
        display: inline-block;
        color: lib.$color-blue-50;
        font-weight: 500;

        &:hover {
          text-decoration: underline;
        }
      }

      .locked-message {
        display: flex;
        align-items: center;
        gap: lib.$spacing-xs;
        font-weight: 600;

        .lock-icon {
          color: lib.$color-light-gray-70;
        }
      }
    }

    img {
      display: none;
    }

    @media screen and #{lib.$mq-md} {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      gap: lib.$spacing-md;
      background-color: transparent;
      // The content changes depending on the selected blocking mode,
      // so if the height would be based on the content, switching blocking modes
      // would cause a lot of jumping around:
      min-height: 150px;

      &::after {
        display: none;
      }

      img {
        display: inline-block;
      }
    }
  }

  &.is-free {
    .control .track {
      // This is like the regular .track's bottom padding, but with
      // $stopLabelHeight multiplied by 1.5, because there's a "(Premium only)"
      // line in a smaller font below the "Promotionals" label for free users:
      padding-bottom: calc(
        var(--thumbDiameter) + #{$trackLineHeight} + #{$stopLabelHeight * 1.5}
      );
    }
    .promotional-ghost-track-stop {
      position: absolute;
      // On small screens, `.track-stop` has a top padding of `$spacing-sm`
      // before the track stop begins:
      top: lib.$spacing-sm;
      left: 33%;
      width: 33%;
      // This is like the regular .track's bottom padding, but with
      // $stopLabelHeight multiplied by 1.5, because there's a "(Premium only)"
      // line in a smaller font below the "Promotionals" label for free users:
      height: calc(
        var(--thumbDiameter) + #{$trackLineHeight} + #{$stopLabelHeight * 1.5}
      );
      background-color: transparent;
      border-style: none;
      cursor: pointer;

      @media screen and #{lib.$mq-md} {
        top: 0;
      }

      .track-stop-promotional {
        color: lib.$color-light-gray-70;
        border-style: none;

        &:hover {
          // The standard background colour, because this can't be selected
          // by a free user:
          background-color: lib.$color-light-gray-20;
        }

        p {
          color: lib.$color-light-gray-70;
          text-align: center;

          .premium-only-marker {
            @include lib.text-body-xs;
            color: lib.$color-purple-50;
          }
        }

        &.is-selected {
          p,
          .lock-icon {
            color: lib.$color-purple-50;
          }
        }
      }

      &:hover {
        p {
          color: lib.$color-purple-30;
        }
      }

      &:focus {
        outline: none;

        .track-stop {
          outline: 2px solid lib.$color-blue-50;
        }
      }
    }
  }
}

.upgrade-tooltip-underlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;

  .upgrade-tooltip {
    background-color: lib.$color-white;
    box-shadow: lib.$box-shadow-sm;
    display: flex;
    padding: lib.$spacing-xl;
    gap: lib.$spacing-lg;
    width: lib.$content-md;
    max-width: calc(100% - lib.$spacing-xl);
    border-radius: lib.$border-radius-sm;

    .close-button {
      position: absolute;
      top: lib.$spacing-sm;
      right: lib.$spacing-sm;
      padding: 0;
      background-color: transparent;
      border-style: none;
      border-radius: lib.$border-radius-sm;
    }

    .promotionals-blocking-icon {
      display: none;

      @media screen and #{lib.$mq-md} {
        display: inline-block;
      }
    }

    .upgrade-message {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: lib.$spacing-xs;

      b {
        display: flex;
        align-items: center;
        gap: lib.$spacing-sm;

        svg {
          color: lib.$color-light-gray-70;
        }
      }

      a {
        color: lib.$color-blue-50;
        // Add some padding to the focus outline, without affecting the CTA's
        // position:
        margin: -1 * lib.$spacing-xs;
        padding: lib.$spacing-xs;

        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
}
